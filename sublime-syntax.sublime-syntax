%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: YAML sublime-syntax
file_extensions:
  - sublime-syntax
  - _sublime-syntax
first_line_match: ^%YAML( 1.\d)?$
scope: source.yaml

variables:
  variable: '(\{\{)([a-zA-Z_0-9]*)(\}\})'
  escaped_char: \\(?>[0atnvfre "/\\N_Lp]|x[0-9a-fA-F]{1,2}|x\{[0-9a-fA-F]{1,8}\}|u\d{4}|U\d{8}|c\d+|C-\d+|M-\d+|M-\\C-\d+)

contexts:

  comments:
    - match: '^\s*(#)(.*$)'
      captures:
        1: comment.line.number-sign.yaml punctuation.definition.comment.yaml
        2: comment.line.number-sign.yaml
    - match: '(?<=^| )(#).*$'
      scope: comment.line.number-sign.yaml
      captures:
        1: punctuation.definition.comment.yaml

  main:
    - include: comments
    - match: '^(first_line_match)(:)'
      captures:
        1: keyword.other.syntax
        2: punctuation.separator.key-value
      push: regex

    - match: ^(contexts)(:)
      captures:
        1: keyword.scope.contexts.syntax
        2: punctuation.separator.key-value
      push: contexts_

    - match: ^(variables)(:)
      captures:
        1: keyword.scope.variables.syntax
        2: punctuation.separator.key-value
      push: variables_

    # Numbers
    # Note that the YAML 1.2 spec and http://www.yaml.org/refcard.html
    # disagree on the representation of octal numbers, 0o644 vs 0644. Many
    # implementation seem support use the 0644 syntax.
    - match: '(?:([+-]?(\d+)(\.\d*)?(e[+-]?\d+)?)|0o\d+|0x[0-9a-fA-F]+|[+-]?(?:.inf|.Inf|.NAN))\s*(?=$|,|\}|\])'
      scope: constant.numeric.yaml
    - match: '(?:(?:(-\s*)?(\w+\s*(:)))|(-))\s*([0-9]{4}-[0-9]{2}-[0-9]{2})\s*$'
      scope: constant.other.date.yaml
      captures:
        1: punctuation.definition.entry.yaml
        2: entity.name.tag.yaml
        3: punctuation.separator.key-value.yaml
        4: punctuation.definition.entry.yaml

    - match: (\w.*?)(:)( |$)\s*((\!\!)omap)?
      scope: meta.tag.yaml
      captures:
        1: entity.name.tag.yaml
        2: punctuation.separator.key-value.yaml
        3: keyword.other.omap.yaml
        4: punctuation.definition.keyword.yaml

    - match: (\&|\*)\w.*?$
      scope: variable.other.yaml
      captures:
        1: punctuation.definition.variable.yaml

    - match: '(\<\<): ((\*).*)$'
      scope: keyword.operator.merge-key.yaml
      captures:
        1: entity.name.tag.yaml
        2: keyword.operator.merge-key.yaml
        3: punctuation.definition.keyword.yaml

    - match: '-'
      scope: punctuation.section.begin.yaml

    - match: (#).*?(?=%>)
      scope: punctuation.section.begin.yaml

    - match: '[^''"%\-:?@`&*!,#|>\s\[\]{}](?:[^\[\]{}:#,]|:[^ ]|(?<! )#)*'
      scope: string.unquoted.yaml

  variables_:
    - meta_scope: meta.variables
    - include: comments
    - match: '^(?=\w)'
      pop: true

    # block regex
    - match: '^(\s*)([\w_]*)\s*(:)\s*(>-|\|-|\|)'
      captures:
        2: entity.name.function.syntax
        3: punctuation.separator.key-value
        4: punctuation.definition.block.begin
      push:
        - meta_content_scope: string.unquoted.yaml
        - match: ^(?!^\1\s\s)
          pop: true
        # - include: regex_unquoted_line
        - include: regex_unquoted

    # inline regex
    - match: '\s*([\w_]+)\s*(:)\s*'
      captures:
        1: entity.name.function.syntax
        2: punctuation.separator.key-value
      push: regex

  contexts_:
    - meta_scope: meta.contexts
    - include: comments
    - match: '^(?=\w)'
      pop: true

    # Keyword literals
    - match: \b(true|false|null)\s*(?=$|,|\}|\])
      scope: constant.yaml

    # block regex
    - match: '(^\s*)(-)\s+(match)\s*(:)\s*(>-|\|-|\|)'
      captures:
        2: punctuation.section.begin.yaml
        3: meta.tag.yaml entity.name.tag
        4: punctuation.separator.key-value
        5: punctuation.definition.block.begin
      push:
        - meta_content_scope: string.unquoted.yaml
        - match: ^(?!^\1\s\s\s\s)
          pop: true
        - include: regex_unquoted
      # push:
      #   - meta_scope: string.unquoted.block.yaml
      #   - match: '^(?!^\1)|^(?=\1(-|(?:  )?\w+\s*:)|#)'
      #     pop: true
      #   - match: $
      #   - include: regex_unquoted_line

    # inline regex
    - match: '(-)\s+(match)\s*(:)\s*'
      captures:
        1: punctuation.section.begin.yaml
        2: meta.tag.yaml entity.name.tag
        3: punctuation.separator.key-value
      push:
        - match: $
          pop: true
        - include: comments
        - include: regex

    # captures
    - match: '^(\s*)(captures)\s*(:)\s*'
      captures:
        2: keyword.control.flow.syntax
        3: punctuation.separator.key-value
      push:
        - meta_content_scope: meta.capturing.yaml
        - include: comments
        - match: '^(\s*)(\d+)\s*(:)'
          captures:
            2: constant.numeric
            3: punctuation.separator.key-value
          push: scopes_
        - match: '^(?!^\1)|^(?=\1(-|\w+\s*:)|#)'
          pop: true

    # scope
    - match: '\s*(scope)\s*(:)\s*'
      captures:
        1: meta.tag.yaml entity.name.tag
        2: punctuation.separator.key-value
      push: scopes_

    # include
    - match: '\s*(-)\s*(include)\s*(:)\s*'
      captures:
        1: punctuation.section.begin.yaml
        2: meta.tag.yaml entity.name.tag
        3: punctuation.separator.key-value
      push: scopes_

    # push
    - match: '\s*(push)\s*(:)'
      captures:
        1: keyword.control.flow.push.syntax
        2: punctuation.separator.key-value
      push: scopes_

    # set
    - match: '\s*(set)\s*(:)\s*'
      captures:
        1: keyword.control.flow.push.syntax
        2: punctuation.separator.key-value
      push: scopes_

    # with_prototype
    - match: '\s*(with_prototype)\s*(:)\s*'
      captures:
        1: keyword.control.flow.push.syntax
        2: punctuation.separator.key-value

    # pop
    - match: '\s*(pop)\s*(:)\s*(false|true)\b'
      captures:
        1: keyword.control.flow.pop.syntax
        2: punctuation.separator.key-value
        3: constant.language.syntax

    # meta_scope and meta_content_scope
    - match: '\s*(-)\s*(meta_(?:content_)?scope)\s*(:)\s*'
      captures:
        1: punctuation.section.begin.yaml
        2: meta.tag.yaml entity.name.tag
        3: punctuation.separator.key-value
      push: scopes_

    # meta_include_prototype
    - match: '\s*(-)\s*(meta_include_prototype)\s*(:)\s*(false|true)\b'
      captures:
        1: punctuation.section.begin.yaml
        2: meta.tag.yaml entity.name.tag
        3: punctuation.separator.key-value
        4: constant.language.syntax

    # comment
    - match: '\s*(-?)\s*(comment)\s*(:)\s*(.*)$'
      captures:
        1: punctuation.section.begin.yaml
        2: meta.tag.yaml entity.name.tag
        3: punctuation.separator.key-value
        4: comment.line.syntax

    # string, used to link to another file syntax
    - match: \s*(-)\s*(\")(.*)(\")
      captures:
        1: punctuation.section.begin.yaml
        2: punctuation.definition.string.syntax
        3: string.quoted.double.file.syntax
        4: punctuation.definition.string.syntax

    # string, used to link to another file syntax
    - match: '\s*(-)\s*(?=$| #)'
      captures:
        1: punctuation.section.begin.yaml

    # others:
    - match: '\s+([\w_-]*)\s*(:)'
      captures:
        1: entity.name.class.syntax
        2: punctuation.separator.key-value

  regex:
    - match: ''''
      scope: punctuation.definition.function.begin.yaml
      set: regex_simple
    - match: '"'
      scope: punctuation.definition.function.begin.yaml
      set: regex_double
    - match: (?=\S)
      set: regex_unquoted_line

  regex_unquoted_line:
    - meta_content_scope: string.unquoted.yaml
    - match: '\s+(#)(.*)$'
      captures:
        0: comment.line.number-sign.yaml
        1: punctuation.definition.comment.yaml
      pop: true
    - match: $
      pop: true
    - include: regex_unquoted

  regex_unquoted:
    - meta_scope: string.unquoted.yaml
    - match: \s+(#.*)$
      scope: comment.line.syntax
    - include: regex_common
    - match: '(\()(?=\?)'
      captures:
        1: punctuation.definition.block
        2: support.function.syntax
      push:
        - match: \)
          scope: punctuation.definition.block
          pop: true
        - include: regex_unquoted
    - match: '\('
      scope: punctuation.definition.block
      push:
        - meta_scope: meta.group.capturing.regexp
        - match: \)
          scope: punctuation.definition.block
          pop: true
        - include: regex_unquoted

  regex_common:
    - include: character
    - include: variable_call
    - match: '(?<=\()(\?)((?:-?[imx]){,3})(:|(?=\)))'
      captures:
        1: support.function.syntax
        2: support.function.syntax
        3: support.function.syntax
    - match: '(?<=\()(\?)(=|:|!|<=|<!|>)'
      captures:
        1: support.function.syntax
        2: support.function.syntax
    - match: '(?<=\()(\?)(=|:|!|<=|<!|>)'
      captures:
        1: support.function.syntax
        2: support.function.syntax
    - match: '(?<=\()(\?#)([^)]*)'
      captures:
        0: comment.line.number-sign.syntax
        1: punctuation.definition.comment.syntax

    #   (?<name>subexp), (?'name'subexp)
    - match: '(?<=\()(\?)(<)([a-zA-Z]*)(>)'
      captures:
        1: support.function.syntax
        2: punctuation.definition.arguments.begin.syntax
        3: entity.name.variable.syntax
        4: punctuation.definition.arguments.end.syntax
    - match: '(?<=\()(\?)('')([a-zA-Z]*)('')'
      captures:
        1: support.function.syntax
        2: punctuation.definition.arguments.begin.syntax
        3: entity.name.variable.syntax
        4: punctuation.definition.arguments.end.syntax

    - match: '(\\g|\\k)(<)([a-zA-Z]*)(\+|-)?([0-9]*)(>)'
      captures:
        1: support.function.syntax
        2: punctuation.definition.arguments.begin.syntax
        3: variable.other.regexp
        4: keyword.operator.arithmetic
        5: constant.numeric.regexp
        6: punctuation.definition.arguments.end.syntax
    - match: '(\\g|\\k)('')([a-zA-Z]*)(\+|-)?([0-9]*)('')'
      captures:
        1: support.function.syntax
        2: punctuation.definition.arguments.begin.syntax
        3: variable.other.regexp
        4: keyword.operator.arithmetic
        5: constant.numeric.regexp
        6: punctuation.definition.arguments.end.syntax

    # - match: '(\\g|\\k)(<|'')([a-zA-Z]*)(''|>)'
    #   captures:
    #     1: support.function.syntax
    #     2: punctuation.definition.arguments.begin.syntax
    #     3: variable.other.regexp
    #     4: punctuation.definition.arguments.end.syntax

    - match: '\\\d+'
      scope: support.variable.syntax
    - match: '[.+*|^\$?]'
      scope: keyword.operator.syntax
    - match: '\\[.+*|^\$?]'
      scope: constant.language.syntax
    - match: '\\[\[\](){}]'
      scope: constant.character.escape.yaml
    - match: '(\{)(\d*)((,)(\d*))?(\})'
      captures:
        1: punctuation.definition.begin.syntax
        2: constant.numeric
        4: punctuation.separator.coma
        5: constant.numeric
        6: punctuation.definition.end.syntax
    - match: '\['
      scope: punctuation.definition.arguments.begin.syntax
      push:
        - match: "''"
          scope: constant.character.escape.yaml
        - include: character_class

  regex_simple:
    - meta_content_scope: meta.regex.simple
    - match: "''"
      scope: constant.character.escape.yaml
    - match: "'"
      captures:
        0: punctuation.definition.function.end.yaml
      pop: true
    # - match: '(\{\{)([a-zA-Z_0-9]*)(\}\})'
    - include: regex_common
    - match: '(\()(?=\?)'
      captures:
        1: punctuation.definition.block
        2: support.function.syntax
      push:
        - match: \)
          scope: punctuation.definition.block
          pop: true
        - include: regex_simple
    - match: '\('
      scope: punctuation.definition.block
      push:
        - meta_scope: meta.group.capturing.regexp
        - match: \)
          scope: punctuation.definition.block
          pop: true
        - include: regex_simple

  regex_double:
    - meta_scope: string.quoted.double.yaml
    - match: '"'
      scope: punctuation.definition.function.end.syntax
      pop: true
    - include: regex_common
    - match: '(\()(?=\?)'
      captures:
        1: punctuation.definition.block
        2: support.function.syntax
      push:
        - match: \)
          scope: punctuation.definition.block
          pop: true
        - include: regex_double
    - match: '\('
      scope: punctuation.definition.block
      push:
        - meta_scope: meta.group.capturing.regexp
        - match: \)
          scope: punctuation.definition.block
          pop: true
        - include: regex_double

  character:
    - match: '\\[sSbBzZdDwWhHAG]'
      scope: constant.language.syntax
    - match: '(\[:)(\^?)(\w*)(:\])'
      captures:
        1: punctuation.definition.arguments.begin.syntax
        2: keyword.operator.syntax
        3: variable.other.syntax
        4: punctuation.definition.arguments.end.syntax
    - match: '(\\(?:p|P))(\{)(\^?)([a-zA-Z_0-9]*)(\})'
      captures:
        1: support.function.syntax
        2: punctuation.definition.arguments.begin.syntax
        3: keyword.operator.syntax
        4: variable.other.syntax
        5: punctuation.definition.arguments.end.syntax
    - match: '{{escaped_char}}'
      scope: constant.character.syntax

  variable_call:
    - match: '(\{\{)([a-zA-Z_0-9]*)(\}\})'
      captures:
        1: punctuation.definition.arguments.begin.syntax
        2: variable.parameter.syntax
        3: punctuation.definition.arguments.end.syntax

  character_class:
    - include: character
    - include: variable_call
    - match: '(?<=[\[&])\^'
      scope: keyword.operator.syntax
    - match: '&&'
      scope: keyword.operator.logical.and.syntax
    - match: '\['
      scope: punctuation.definition.arguments
      push: character_class
    - match: '\\[\\\[\]\-\$]'
      scope: constant.character.escape.yaml
    - match: '\\b'
      scope: constant.character.syntax
    - match: '([^\[\]])(-)([^\]])'
      captures:
        1: constant.character
        2: keyword.operator.range.syntax
        3: constant.character
    - match: '\]'
      scope: punctuation.definition.arguments
      pop: true

  scopes_:
    - meta_scope: debug.scope.inline
    - match: '[\w\d-]*'
      scope: variable.other.scope.syntax
    - match: '\.'
      scope: keyword.operator.accessor.syntax
    - match: \".*\"
      scope: string.quoted.double.file.syntax
    - match: \[
      scope: punctuation.definition.array.begin.syntax
      push:
        - match: ','
          scope: punctuation.separator.array-element.syntax
        - match: '\]'
          scope: punctuation.definition.array.end.syntax
        - include: scopes_

    - match: $
      pop: true
    - include: comments #comment

  scope_block:
    - meta_scope: debug.scope.block
    - match: '(\s*)(-)\s*($|(?= #))'
      captures:
        2: punctuation.section.begin.yaml
      push:
        - match: (\1)(?=)
    - match: '\s*(-)\s*(?=\")'
      captures:
        1: punctuation.section.begin.yaml
      push: scope_inline
    - match: '\s*(-)\s*(?=[^:]*$)'
      captures:
        1: punctuation.section.begin.yaml
      push: scope_inline
    - match: (?=.)
      pop: true

  scope_inline:
    - match: \w+
      scope: variable.scope.syntax
    - match: \.
      scope: punctuation.accessor.scope.syntax
    - match: (?=.)
      pop: true
  # skip_comment_before_scalar:
  #   - match: '^\s*(#)(.*$)'
  #     captures:
  #       1: comment.line.number-sign.yaml punctuation.definition.comment.yaml
  #       2: comment.line.number-sign.yaml
  #   - match: '(?<=^| )(#).*$'
  #     scope: comment.line.number-sign.yaml
  #     captures:
  #       1: punctuation.definition.comment.yaml
  #   - match: (?=\S)
  #     set: regex_unquoted_line
