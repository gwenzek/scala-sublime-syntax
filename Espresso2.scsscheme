@name "Espresso Libre";
@author "Chris Thomas";

$namespace_header: #9AFF87; // light green
$class_header: #C5656B; // pink
$function_header: #FF9358; // orange
$annotations: #8B8E9C; // grey

$documentation: #0077FF; // dark blue
$comment: darken($documentation, 8%);

$keyword: #43A8ED;
$keyword_dimmed: transparentize($keyword, 0.20);
$punctuation: #D1D187;

$constant_numeric: #44AA43;
$constant_language: #585CF6; // boolean, null, ...
$constant_other: #C5656B;
$string: #049B0A;

* {
  background: #2A211C;
  caret: #889AFF;
  foreground: #CCC0B5;
  invisibles: #BFBFBF;
  lineHighlight: #3A312C;
  selection: #4A414C;
}

punctuation {
  foreground: $punctuation;
}

// Comments
comment {
  @name "Comments and documentation";

  foreground: $comment;
  fontStyle: italic;


  &.block.documentation, &.block.documentation text {
    foreground: $documentation;
  }

  &.comment.block.documentation punctuation.definition.tag {
    foreground: transparentize($punctuation, 0.20);
    fontStyle: none;
  }

  comment.line.todo {
    foreground: #FF6600;
  }
}

punctuation.definition.comment, punctuation.definition.line-comment {
  foreground: $comment;
}

// Keywords

keyword {
  @name "Keyword declaration";

  foreground: $keyword;
  fontStyle: bold;

  &.declaration {
    foreground: $keyword_dimmed;
    fontStyle: bold;
  }

  &.operator.assignment {
    foreground: $keyword_dimmed;
  }

  &.operator.accessor {
    foreground: $punctuation;
    fontStyle: none;
  }
}

storage {
  foreground: $keyword_dimmed;
  fontStyle: bold;
}

// Constants

constant {
  @name "Constants";
  foreground: $constant_numeric;
  fontStyle: none;

  &.character, &.other {
    @name "Characters";
    foreground: $constant_other;
  }

  &.language {
    @name "Built-in constant";
    foreground: #585CF6;
    fontStyle: bold;
  }
}

entity.name.constant {
  @name "User-defined constant";
  foreground: #44AA43;
}

variable.language {
  @name "Variable";
  foreground: #318495;
  fontStyle: none;
}

// Strings

string {
  @name "String";
  foreground: $string;
  fontStyle: none;

  source {
    @name "String interpolated";
    foreground: #CCC0B5;
    fontStyle: none;

    string {
      @name "String";
      foreground: $string;
      fontStyle: none;
    }
  }
}

punctuation.definition.string {
  @name "Punctuation string";
  foreground: $string;
}

constant.character.escape {
  foreground: #2FE420;
  fontStyle: none;
}

punctuation.definition.string.interpolated.element {
  foreground: $constant_other;
}

// Dictionaries

punctuation.separator.key-value,
punctuation.separator.dictionary.key-value,
punctuation.definition.dictionary,
punctuation.section.dictionary,
punctuation.section.dictionary-or-set {
  foreground: #C5656B;
}

meta.preprocessor {
  @name "Preprocessor line";
  foreground: #1A921C;
  fontStyle: none;
}

keyword.control.import {
  @name "Preprocessor directive";
  foreground: #9AFF87;
  fontStyle: bold;
}

// Functions declaration

entity.name.function, keyword.other.name-of-parameter.objc {
  @name "Function name";
  foreground: $function_header;
  fontStyle: bold;
}

meta.method.identifier punctuation.definition,
meta.method.identifier punctuation.separator,
punctuation.definition.function,
punctuation.section.parameters,
punctuation.definition.parameters,
punctuation.separator.parameters,
punctuation.section.function,
punctuation.section.method
{
  foreground: $function_header;
}

variable.parameter {
  fontStyle: italic;
}

entity.name.filename {
  foreground: $function_header;
  fontStyle: italic;
}

// Types

variable.type, variable.other.type, entity.name.constructor {
  @name "Type name";
  foreground: #6D79DE;
  fontStyle: none;
}

support.class, support.type, storage.type.primitive {
  @name "Library object";
  foreground: #6D79DE;
  fontStyle: bold;
}

// Class

entity.name {
  @name "Class definition";
  foreground: $class_header;
  fontStyle: bold;
}

meta.class.identifier punctuation.separator,
meta.class.identifier punctuation.definition,
punctuation.definition.class,
punctuation.section.class
{
  @name "Punctuation parameters";
  foreground: $class_header;
}

punctuation.definition.arguments.constructor {
  @name "Constructor punctuation";
  foreground: #6D79DE;
  fontStyle: none;
}

entity.other.inherited-class {
  @name "Inherited class name";
  foreground: #6D79DE;
  fontStyle: italic;
}

// Namespace

entity.name.namespace {
  @name "Namespace declaration";
  foreground: #9AFF87CC;
  fontStyle: bold;
}

// Annotations

storage.modifier.annotation,
meta.statement.decorator,
meta.statement.decorator support.function,
meta.statement.decorator variable.function,
keyword.other.decorator,
variable.annotation,
{
  foreground: $annotations;
  fontStyle: bold;
}

punctuation.separator.annotation,
punctuation.section.annotation
{
  foreground: $annotations;
}

meta.section entity.name.section, declaration.section entity.name.section {
  @name "Section";
  fontStyle: italic;
}

support.function {
  @name "Library function";
  foreground: #7290D9;
  fontStyle: bold;
}

variable.function, punctuation.definition.arguments, punctuation.section.arguments, meta.function-call punctuation.separator.parameters, punctuation.separator.arguments, punctuation.separator.argument {
  @name "Function call";
  foreground: #7290D9;
  fontStyle: none;
}

support.class, support.type {
  @name "Library object";
  foreground: #6D79DE;
  fontStyle: bold;
}

support.constant {
  @name "Library constant";
  foreground: #00AF0E;
  fontStyle: bold;
}

support.variable {
  @name "Library variable";
  foreground: #2F5FE0;
  fontStyle: bold;
}

keyword.operator.js {
  @name "JS: Operator";
  foreground: #687687;
}

invalid {
  @name "Invalid";
  foreground: #FFFFFF;
  background: #990000;

  &.deprecated {
    foreground: #802020;
    background: #FFD0D0;
  }
}

text source, string.unquoted {
  @name "Embedded source";
  background: #F5AA7715;
}

meta.tag.preprocessor.xml {
  @name "Markup XML declaration";
  foreground: #8F7E65;
  fontStyle: none;
}

meta.tag.sgml.doctype {
  @name "Markup DOCTYPE";
  foreground: #888888;
  fontStyle: none;
}

string.quoted.docinfo.doctype.DTD {
  @name "Markup DTD";
  fontStyle: italic;
}

meta.tag, declaration.tag {
  @name "Markup tag";
  foreground: $keyword_dimmed;
  fontStyle: none;
}

entity.name.tag, entity.name.section, variable.annotation {
  @name "Markup name of tag";
  foreground: #CCC0B5;
  fontStyle: bold;
}

entity.other.attribute-name {
  @name "Markup tag attribute";
  fontStyle: italic;
}

sublimelinter.mark.error {
  @name "SublimeLinter Error";
  foreground: #D02000;
}

sublimelinter.gutter-mark {
  @name "SublimeLinter Gutter Mark";
  foreground: #FFFFFF;
}

sublimelinter.mark.warning {
  @name "SublimeLinter Warning";
  foreground: #DDB700;
}

punctuation.definition.type {
  @name "Punctuation definition type";
  foreground: $class_header;
}

punctuation.definition.arguments.type {
  @name "Punctuation type arguments";
  foreground: #D1D187;
}

punctuation.definition.block {
  @name "Punctuation block";
  foreground: #D1D187;
}

punctuation.definition.block.loop,
punctuation.definition.block.switch,
punctuation.definition.block.conditional,
punctuation.definition.block.trycatch,
punctuation.definition.block.other,
punctuation.section.loop,
punctuation.section.switch,
punctuation.section.conditional,
punctuation.section.trycatch,
punctuation.section.other,
punctuation.definition.expression.loop,
punctuation.definition.expression.switch,
punctuation.definition.expression.conditional,
punctuation.definition.expression.trycatch,
punctuation.definition.expression.other
{
  @name "Punctuation block";
  foreground: $keyword_dimmed;
}

meta.variable.identifier punctuation.definition, meta.variable.identifier punctuation.separator {
  @name "Punctuation variable";
  foreground: $keyword_dimmed;
}

punctuation.definition.arguments.type, punctuation.separator.argument.type {
  @name "Type punctuation";
  foreground: #D1D187;
}

punctuation.definition.array, punctuation.definition.tuple, punctuation.separator.array-element {
  @name "Array punctuation";
  foreground: #D1D187;
}

punctuation.definition.module-binding {
  @name "Punctuation module-binding";
  foreground: #D1D187;
}

meta.diff.header {
  foreground: #6D79DE;
}

markup.inserted {
  background: #44FF4330;
}

markup.inserted.git_gutter {
  foreground: #44FF43;
}

markup.deleted {
  background: #FF103030;
}

markup.deleted.git_gutter {
  foreground: #FF1030;
}

markup.changed.git_gutter {
  foreground: $keyword_dimmed;
}

markup.ignored.git_gutter {
  foreground: #FF9358;
}

markup.italic {
  fontStyle: italic;
}

markup.bold {
  fontStyle: bold;
}

meta.toc-list.line-number {
  foreground: #44AA43;
}

markup.background {
  @name "Explicit background markup (for Trello)";

  &.green {
    background: $namespace_header;
  }

  &.red {
    background: #eb5a46b0;
  }

  &.blue {
    background: $comment;
  }

  &.yellow {
    background: #f2d600b0;
  }

  &.sky {
    background: $keyword;
  }

  &.purple {
    background: #c377e0b0;
  }

  &.black {
    background: #4d4d4db0;
  }

  &.pink {
    background: #ff80ceb0;
  }

  &.orange {
    background: $function_header;
  }
}
