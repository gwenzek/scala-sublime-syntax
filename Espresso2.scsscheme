@name "Espresso Libre";
@author "Chris Thomas";

$base03: #2d241f;
$base02: #372f2a;
$base01: #4d444e;
$base00: #bcbd74;
$base0: #c2b7ae;
$base1: #d0c5bc;
$base2: #d0c5bc;
$base3: #2d241f;
$palette1: #3fa5ea;
$palette2: #227eff;
$palette3: #eb8248;
$palette4: #d67479;
$palette5: #7dcb6c;
$palette6: #716fff; //#6D79DE;
$palette6bis: #585CF6;
$palette7: #808391;
$palette8: #009907;
$palette9: #3ea53e;
$palette10: #7f9ce6;

// $foreground: hsl(29, 18%, 75%);
$background: $base03; //base03
$background_hl: $base02; //base02

$foreground: $base0; //base02
$foreground_em: $base1; //base03


$function_header: $palette3; // orange
$class_header: $palette4; // pink
$namespace_header: $palette5; // light green

$function_call: $palette10; // dim purple
$annotations: $palette7; // grey

$documentation: $palette2; // dark blue
$comment: darken($documentation, 8%);

$keyword: $palette1;
$keyword_dimmed: transparentize($keyword, 0.20);
$punctuation: $base00;
$keyword_loop: $namespace_header;

$constant_numeric: $palette9;
$constant_language: $palette6; // boolean, null, ...
$constant_other: $class_header;
$dictionnary: $class_header;
$string: $palette8;
$type: $palette6;
$embedded_code: lighten($background, 5%);

* {
  background: $background;
  caret: $palette6;
  foreground: $foreground;
  invisibles: transparentize($foreground, 0.80);
  lineHighlight: $base02;
  selection: $base01;
}

punctuation {
  foreground: $punctuation;
}

// Comments
comment {
  @name "Comments and documentation";

  foreground: $palette2;
  // fontStyle: italic;

  &.block.documentation, &.block.documentation text {
    foreground: $documentation;
  }

  &.comment.block.documentation punctuation.definition.tag {
    foreground: transparentize($punctuation, 0.20);
    fontStyle: none;
  }

  comment.line.todo {
    foreground: #FF6600;
  }
}

punctuation.definition.comment, punctuation.definition.line-comment {
  foreground: $comment;
}

// Keywords

keyword {
  @name "Keyword declaration";

  foreground: $keyword;
  fontStyle: bold;

  &.declaration {
    foreground: $keyword_dimmed;
    fontStyle: bold;
  }

  &.operator.assignment {
    foreground: $keyword_dimmed;
  }

  &.operator.accessor {
    foreground: $punctuation;
    fontStyle: none;
  }
}

storage {
  foreground: $keyword_dimmed;
  fontStyle: bold;
}

// Constants

constant {
  @name "Constants";
  foreground: $constant_numeric;
  fontStyle: none;

  &.character, &.other {
    @name "Characters";
    foreground: $constant_other;
  }

  &.language {
    @name "Built-in constant";
    foreground: $palette6;
    fontStyle: bold;
  }
}

entity.name.constant {
  @name "User-defined constant";
  foreground: #44AA43;
}

variable.language {
  @name "Variable";
  foreground: #318495;
  fontStyle: none;
}

// Strings

string {
  @name "String";
  foreground: $string;
  fontStyle: none;

  meta.interpolated {
    @name "String interpolated";
    foreground: #CCC0B5;
    fontStyle: none;

    string {
      @name "String";
      foreground: $string;
      fontStyle: none;
    }
  }
}

punctuation.definition.string {
  @name "Punctuation string";
  foreground: $string;
}

constant.character.escape {
  foreground: #2FE420;
  fontStyle: none;
}

punctuation.definition.string.interpolated.element {
  foreground: $constant_other;
}

// Dictionaries

punctuation.separator.key-value,
punctuation.separator.dictionary,
punctuation.definition.dictionary,
punctuation.section.dictionary,
punctuation.section.dictionary-or-set {
  foreground: $dictionnary;
}

meta.preprocessor {
  @name "Preprocessor line";
  foreground: $string;
  fontStyle: none;
}

entity.name.function,
keyword.other.name-of-parameter.objc {
  @name "Function name";
  foreground: $function_header;
  fontStyle: bold;
}

meta.method.identifier punctuation.definition,
meta.method.identifier punctuation.separator,
meta.method.parameters punctuation.section.group,
punctuation.definition.function,
punctuation.section.parameters,
punctuation.definition.parameters,
punctuation.separator.parameters,
punctuation.section.function,
punctuation.section.method
{
  foreground: $function_header;
}

variable.parameter {
  fontStyle: italic;
}

entity.name.filename {
  foreground: $function_header;
  fontStyle: italic;
}

// Types

support.variable.property.ts,
variable.type, variable.other.type,  entity.name.constructor {
  @name "Type name";
  foreground: $type;
  fontStyle: none;
}

support.class, support.type, storage.type.primitive,
storage.type.java {
  @name "Library object";
  foreground: $type;
  fontStyle: bold;
}

// Class

entity.name {
  @name "Class definition";
  foreground: $class_header;
  fontStyle: bold;
}

meta.class.identifier punctuation.separator,
meta.class.identifier punctuation.definition.arguments.type,
meta.class.identifier punctuation.definition.arguments,
meta.class.identifier punctuation.definition,
punctuation.definition.class,
punctuation.section.class,
punctuation.section.inheritance
{
  @name "Punctuation parameters";
  foreground: $class_header;
}

punctuation.definition.arguments.constructor,
punctuation.section.generic
{
  @name "Constructor punctuation";
  foreground: $type;
  fontStyle: none;
}

entity.other.inherited-class {
  @name "Inherited class name";
  foreground: $type;
  fontStyle: italic;
}

// Namespace

keyword.control.import,
entity.name.namespace,
entity.name.module,
storage.modifier.module,
storage.modifier.namespace
{
  foreground: $namespace_header;
  fontStyle: bold;
}

punctuation.section.module,
punctuation.section.namespace,
punctuation.definition.module-binding,
punctuation.separator.module-binding
{
  foreground: $namespace_header;
}

// Function calls

support.function {
  @name "Library function";
  foreground: $function_call;
  fontStyle: bold;
}

variable.function,
punctuation.definition.arguments,
punctuation.section.arguments,
meta.function-call.ts entity.name.function.ts,
meta.function-call punctuation.separator.parameters,
meta.method-call punctuation.section.group,
meta.function-call punctuation.section.generic,
meta.function-call punctuation.section.group,
punctuation.separator.arguments,
punctuation.separator.argument
{
  @name "Function call";
  foreground: $function_call;
  fontStyle: none;
}

// Annotations

storage.modifier.annotation,
meta.statement.decorator meta.function-call,
meta.statement.decorator support.function,
meta.statement.decorator variable.function,
meta.statement.decorator meta.function-call variable.function,
keyword.other.decorator,
variable.annotation,
{
  foreground: $annotations;
  fontStyle: bold;

  meta.function-call.arguments,
  {
    foreground: $foreground;
    fontStyle: none;
  }
}

meta.statement.decorator meta.function-call meta.function-call.arguments variable.function,
{
  foreground: $function_call;
  fontStyle: none;
}
meta.statement.decorator meta.function-call meta.function-call.arguments support.function
{
  foreground: $function_call;
  fontStyle: bold;
}

punctuation.separator.annotation,
punctuation.section.annotation,
meta.statement.decorator meta.function-call punctuation.section.arguments,
meta.statement.decorator meta.function-call punctuation.separator.arguments,
{
  foreground: $annotations;
}

meta.statement.decorator meta.function-call meta.function-call.arguments punctuation.section.arguments,
meta.statement.decorator meta.function-call meta.function-call.arguments punctuation.separator.arguments,
{
  foreground: $function_call;
}

meta.section entity.name.section, declaration.section entity.name.section {
  @name "Section";
  fontStyle: italic;
}


support.class, support.type {
  @name "Library object";
  foreground: $type;
  fontStyle: bold;
}

support.constant {
  @name "Library constant";
  foreground: #00AF0E;
  fontStyle: bold;
}

support.variable {
  @name "Library variable";
  foreground: #2F5FE0;
  fontStyle: bold;
}

keyword.operator.js {
  @name "JS: Operator";
  foreground: #687687;
}

invalid {
  @name "Invalid";
  foreground: #FFFFFF;
  background: #990000;

  &.deprecated {
    foreground: #802020;
    background: #FFD0D0;
  }
}

text source, string.unquoted, markup.raw {
  @name "Embedded source";
  background: $embedded_code;
}

meta.tag.preprocessor.xml {
  @name "Markup XML declaration";
  foreground: #8F7E65;
  fontStyle: none;
}

meta.tag.sgml.doctype {
  @name "Markup DOCTYPE";
  foreground: #888888;
  fontStyle: none;
}

string.quoted.docinfo.doctype.DTD {
  @name "Markup DTD";
  fontStyle: italic;
}

meta.tag, declaration.tag {
  @name "Markup tag";
  foreground: $keyword_dimmed;
  fontStyle: none;
}

entity.name.tag, entity.name.section, variable.annotation {
  @name "Markup name of tag";
  foreground: #CCC0B5;
  fontStyle: bold;
}

entity.other.attribute-name {
  @name "Markup tag attribute";
  fontStyle: italic;
}

sublimelinter.mark.error {
  @name "SublimeLinter Error";
  foreground: #D02000;
}

sublimelinter.gutter-mark {
  @name "SublimeLinter Gutter Mark";
  foreground: #FFFFFF;
}

sublimelinter.mark.warning {
  @name "SublimeLinter Warning";
  foreground: #DDB700;
}

punctuation.definition.type {
  @name "Punctuation definition type";
  foreground: $class_header;
}

punctuation.definition.arguments.type {
  @name "Punctuation type arguments";
  foreground: #D1D187;
}

punctuation.definition.block {
  @name "Punctuation for blocks";
  foreground: #D1D187;
}


keyword.control.loop {
  foreground: $keyword_loop;
}

punctuation.definition.block.loop,
punctuation.section.loop,
punctuation.definition.expression.loop
{
  foreground: transparentize($keyword_loop, 0.20);
}

punctuation.definition.block.switch,
punctuation.definition.block.conditional,
punctuation.definition.block.trycatch,
punctuation.definition.block.other,
punctuation.section.switch,
punctuation.section.conditional,
punctuation.section.trycatch,
punctuation.section.other,
punctuation.section.block.with,
punctuation.separator.annotation.variable.python,
punctuation.definition.expression.switch,
punctuation.definition.expression.conditional,
punctuation.definition.expression.trycatch,
punctuation.definition.expression.other
{
  @name "Other blocks";
  foreground: $keyword_dimmed;
}


meta.variable.identifier punctuation.definition, meta.variable.identifier punctuation.separator {
  @name "Punctuation variable";
  foreground: $keyword_dimmed;
}

punctuation.definition.arguments.type, punctuation.separator.argument.type {
  @name "Type punctuation";
  foreground: #D1D187;
}

punctuation.definition.array, punctuation.definition.tuple, punctuation.separator.array-element {
  @name "Array punctuation";
  foreground: #D1D187;
}

meta.diff.header {
  foreground: $type;
}

markup.inserted {
  background: #44FF4330;
}

markup.inserted.git_gutter {
  foreground: #44FF43;
}

markup.deleted {
  background: #FF103030;
}

markup.deleted.git_gutter {
  foreground: #FF1030;
}

markup.changed.git_gutter {
  foreground: $keyword_dimmed;
}

markup.ignored.git_gutter {
  foreground: #FF9358;
}

markup.italic {
  fontStyle: italic;
}

markup.bold {
  fontStyle: bold;
}

meta.toc-list.line-number {
  foreground: #44AA43;
}

markup.background {
  @name "Explicit background markup (for Trello)";

  &.green {
    background: $namespace_header;
  }

  &.red {
    background: #eb5a46b0;
  }

  &.blue {
    background: $comment;
  }

  &.yellow {
    background: #f2d600b0;
  }

  &.sky {
    background: $keyword;
  }

  &.purple {
    background: #c377e0b0;
  }

  &.black {
    background: #4d4d4db0;
  }

  &.pink {
    background: #ff80ceb0;
  }

  &.orange {
    background: $function_header;
  }
}
